#include <Arduino.h>
#include <LiquidCrystal.h>

const int rs = 7, en = 8, d4 = 9, d5 = 10, d6 = 11, d7 = 12;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


const byte buffSize = 40;
char inputBuffer[buffSize];
const char startMarker = '<';
const char endMarker = '>';
byte bytesRecvd = 0;
boolean readInProgress = false;
boolean newDataFromPC = false;
char messageFromPC[buffSize] = {0};
unsigned long curMillis;
unsigned long prevReplyToPCmillis = 0;
unsigned long replyToPCinterval = 1000;
char* storedMessagesFromPC[20];
uint8_t counterMessage = 0;
uint8_t counterStoredMessage = 0;
char* formattedStoredMessages[2][1];
char* formattedHour[20];
char* formattedDestination[20];
int i;
uint8_t counterDiscriminate;

//=============
 
void parseData() {

    // split the data into its parts
    
  char * strtokIndx; // this is used by strtok() as an index
  
  strtokIndx = strtok(inputBuffer,",");     // get the first part - the string
  strcpy(messageFromPC, strtokIndx);        // copy it to messageFromPC
  storedMessagesFromPC[counterMessage] = messageFromPC;

}

//=============

void getDataFromPC() {

    // receive data from PC and save it into inputBuffer
    
  if(Serial.available() > 0) {

    char x = Serial.read();

      // the order of these IF clauses is significant
      
    if (x == endMarker) {
      readInProgress = false;
      newDataFromPC = true;
      inputBuffer[bytesRecvd] = 0;
      parseData();
    }
    
    if(readInProgress) {
      inputBuffer[bytesRecvd] = x;
      bytesRecvd ++;
      if (bytesRecvd == buffSize) {
        bytesRecvd = buffSize - 1;
      }
    }

    if (x == startMarker) { 
      bytesRecvd = 0; 
      readInProgress = true;
    }
  }
}

//============
void discriminateData() {
    /*       
          if(storedMessagesFromPC[counterDiscriminate] >= 'A' && storedMessagesFromPC[counterDiscriminate] <= 'Z'){
          formattedHour[counterDiscriminate] = storedMessagesFromPC[counterDiscriminate];
          }
          else {
          formattedDestination[counterDiscriminate-counterMessage] = storedMessagesFromPC[counterDiscriminate];
          }
          counterDiscriminate++;
    */
}

//=============
void displayLCD() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.write(formattedHour[0]);
  lcd.setCursor(0, 1);
  lcd.write(formattedDestination[0]);
}

//=============

void showParsedData() {
    
  if (newDataFromPC) {
      
    // Printing data to Serial monitor
    newDataFromPC = false;
    Serial.print("<JE PROVIENS DU CODE ARDUINO ");
    Serial.print(messageFromPC);
    Serial.print(" Time ");
    Serial.print(curMillis >> 9); 
    Serial.print(storedMessagesFromPC[counterMessage]);
    //discriminateData();
    if(storedMessagesFromPC[counterMessage] >= 'A' && storedMessagesFromPC[counterMessage] <= 'Z'){
          formattedHour[counterMessage] = storedMessagesFromPC[counterMessage];
          counterDiscriminate++;
          }
          else {
          formattedDestination[counterMessage-1-counterDiscriminate] = storedMessagesFromPC[counterMessage];
          }
          
        Serial.println();
        Serial.print(" Stored in formattedDestination[");
        Serial.print(counterDiscriminate);
        Serial.print("] : ");
        Serial.print(formattedDestination[counterDiscriminate]);
        Serial.print(" Stored in formattedDestination[");
        Serial.print(counterDiscriminate-1);
        Serial.print("] : ");
        Serial.print(formattedDestination[counterDiscriminate-1]);
        Serial.println();
        Serial.print(" Stored in formattedHour[");
        Serial.print(counterMessage - counterDiscriminate);
        Serial.print("] : ");
        Serial.print(formattedHour[counterMessage - counterDiscriminate]);
      
    
    
    Serial.println(">");
  
    counterMessage++;
    
    if (counterMessage == 15) {
      
      lcd.write("about to display");
      delay(1000);
      displayLCD();
    }
    
  }

}


//=============

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);

    // tell the PC we are ready
  Serial.println("<Arduino is ready>");
}

//=============

void loop() {
  curMillis = millis();
  getDataFromPC();
  showParsedData();
}