#include <Arduino.h>
#include <LiquidCrystal.h>

const int rs = 7, en = 8, d4 = 9, d5 = 10, d6 = 11, d7 = 12;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


const byte buffSize = 40;
char inputBuffer[buffSize];
const char startMarker = '<';
const char endMarker = '>';
byte bytesRecvd = 0;
boolean readInProgress = false;
boolean newDataFromPC = false;
char messageFromPC[buffSize] = {0};
unsigned long curMillis;
unsigned long prevReplyToPCmillis = 0;
unsigned long replyToPCinterval = 1000;
char* storedMessagesFromPC[20];
uint8_t counterMessage = 0;
uint8_t counterStoredMessage = 0;
char* formattedStoredMessages[2][1];
char* formattedHour[20];
char* formattedDestination[20];
int i;

//=============
 
void parseData() {

    // split the data into its parts
    
  char * strtokIndx; // this is used by strtok() as an index
  
  strtokIndx = strtok(inputBuffer,",");     // get the first part - the string
  strcpy(messageFromPC, strtokIndx);        // copy it to messageFromPC

}

//=============

void getDataFromPC() {

    // receive data from PC and save it into inputBuffer
    
  if(Serial.available() > 0) {

    char x = Serial.read();

      // the order of these IF clauses is significant
      
    if (x == endMarker) {
      readInProgress = false;
      newDataFromPC = true;
      inputBuffer[bytesRecvd] = 0;
      parseData();
    }
    
    if(readInProgress) {
      inputBuffer[bytesRecvd] = x;
      bytesRecvd ++;
      if (bytesRecvd == buffSize) {
        bytesRecvd = buffSize - 1;
      }
    }

    if (x == startMarker) { 
      bytesRecvd = 0; 
      readInProgress = true;
    }
  }
}

//============
void displayLCD() {
       
}

//=============

void showParsedData() {
    
    if (newDataFromPC) {
        
        newDataFromPC = false;
        Serial.print("<JE PROVIENS DU CODE ARDUINO ");
        Serial.print(messageFromPC);
        Serial.print(" Time ");
        Serial.print(curMillis >> 9); // divide by 512 is approx = half-seconds
        storedMessagesFromPC[counterMessage] = messageFromPC;
        
        //formattedStoredMessages[0][counterMessage] = storedMessagesFromPC[counterMessage];         
         
        
          
        Serial.print(counterMessage);
        //counterMessage++;
        Serial.print(storedMessagesFromPC[counterMessage]);
        Serial.println(">");
       
        lcd.clear();
        if (storedMessagesFromPC[counterMessage][0] >= 'A' && storedMessagesFromPC[counterMessage][0] <= 'Z') {
        lcd.setCursor(0, 1);
        }
     //   lcd.write(formattedStoredMessages[1][counterMessage]);
        else {
        lcd.setCursor(0, 0);
        //lcd.write(formattedDestination[counterMessage]);
        }
        lcd.write(storedMessagesFromPC[counterMessage]);
        
        // lcd.write(" ");
        // lcd.write(counterMessage-1);
        counterMessage++;
    }

}
/*
void showStoredMessages() {

    while (counterStoredMessage < counterMessage){
    Serial.print("Stored message : ");
        Serial.print(storedMessagesFromPC[counterStoredMessage]);
    Serial.println(">");
    counterStoredMessage++;
    }
  
}
*/

//=============
void formatMessages() {
  
  //char formattedStoredMessages[2][(counterMessage/2)];
  for (i = 0; i < counterMessage; i++) {
    formattedStoredMessages[i/(counterMessage/2)][i%(counterMessage/2)] = storedMessagesFromPC[i];
  }
}



//=============

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);

    // tell the PC we are ready
  Serial.println("<Arduino is ready>");
}

//=============

void loop() {
  curMillis = millis();
  getDataFromPC();
  showParsedData();
  displayLCD();
  //showStoredMessages();

}